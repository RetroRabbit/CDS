//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDS.Client.BusinessLayer.CDSWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CDSWebService.ICDSService")]
    public interface ICDSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/SaveDocument", ReplyAction="http://tempuri.org/ICDSService/SaveDocumentResponse")]
        string SaveDocument(CDS.Client.DataAccessLayer.DB.SYS_DOC_Header entry, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/SaveDocument", ReplyAction="http://tempuri.org/ICDSService/SaveDocumentResponse")]
        System.Threading.Tasks.Task<string> SaveDocumentAsync(CDS.Client.DataAccessLayer.DB.SYS_DOC_Header entry, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/PrintDocument", ReplyAction="http://tempuri.org/ICDSService/PrintDocumentResponse")]
        string PrintDocument(long id, long printerBy, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/PrintDocument", ReplyAction="http://tempuri.org/ICDSService/PrintDocumentResponse")]
        System.Threading.Tasks.Task<string> PrintDocumentAsync(long id, long printerBy, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ApproveDocument", ReplyAction="http://tempuri.org/ICDSService/ApproveDocumentResponse")]
        string ApproveDocument(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ApproveDocument", ReplyAction="http://tempuri.org/ICDSService/ApproveDocumentResponse")]
        System.Threading.Tasks.Task<string> ApproveDocumentAsync(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/CancelDocument", ReplyAction="http://tempuri.org/ICDSService/CancelDocumentResponse")]
        string CancelDocument(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/CancelDocument", ReplyAction="http://tempuri.org/ICDSService/CancelDocumentResponse")]
        System.Threading.Tasks.Task<string> CancelDocumentAsync(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/RejectDocument", ReplyAction="http://tempuri.org/ICDSService/RejectDocumentResponse")]
        string RejectDocument(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/RejectDocument", ReplyAction="http://tempuri.org/ICDSService/RejectDocumentResponse")]
        System.Threading.Tasks.Task<string> RejectDocumentAsync(long entryId, long personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/SaveJobLines", ReplyAction="http://tempuri.org/ICDSService/SaveJobLinesResponse")]
        string SaveJobLines(long headerid, System.Collections.Generic.List<CDS.Client.DataAccessLayer.DB.SYS_DOC_Line> lines, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/SaveJobLines", ReplyAction="http://tempuri.org/ICDSService/SaveJobLinesResponse")]
        System.Threading.Tasks.Task<string> SaveJobLinesAsync(long headerid, System.Collections.Generic.List<CDS.Client.DataAccessLayer.DB.SYS_DOC_Line> lines, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/GenerateOrder", ReplyAction="http://tempuri.org/ICDSService/GenerateOrderResponse")]
        string GenerateOrder(long orderId, long createdBy, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/GenerateOrder", ReplyAction="http://tempuri.org/ICDSService/GenerateOrderResponse")]
        System.Threading.Tasks.Task<string> GenerateOrderAsync(long orderId, long createdBy, long printer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/GetAvailablePrinter", ReplyAction="http://tempuri.org/ICDSService/GetAvailablePrinterResponse")]
        System.Collections.Generic.List<string> GetAvailablePrinter(string excludeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/GetAvailablePrinter", ReplyAction="http://tempuri.org/ICDSService/GetAvailablePrinterResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAvailablePrinterAsync(string excludeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/DistributedTransactionServiceRunning", ReplyAction="http://tempuri.org/ICDSService/DistributedTransactionServiceRunningResponse")]
        bool DistributedTransactionServiceRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/DistributedTransactionServiceRunning", ReplyAction="http://tempuri.org/ICDSService/DistributedTransactionServiceRunningResponse")]
        System.Threading.Tasks.Task<bool> DistributedTransactionServiceRunningAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ProcessStatements", ReplyAction="http://tempuri.org/ICDSService/ProcessStatementsResponse")]
        void ProcessStatements(long personId, long periodId, System.Nullable<long> printerId, System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> statements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ProcessStatements", ReplyAction="http://tempuri.org/ICDSService/ProcessStatementsResponse")]
        System.Threading.Tasks.Task ProcessStatementsAsync(long personId, long periodId, System.Nullable<long> printerId, System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> statements);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ProcessStatementsUpdate", ReplyAction="http://tempuri.org/ICDSService/ProcessStatementsUpdateResponse")]
        System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> ProcessStatementsUpdate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDSService/ProcessStatementsUpdate", ReplyAction="http://tempuri.org/ICDSService/ProcessStatementsUpdateResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement>> ProcessStatementsUpdateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICDSServiceChannel : CDS.Client.BusinessLayer.CDSWebService.ICDSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CDSServiceClient : System.ServiceModel.ClientBase<CDS.Client.BusinessLayer.CDSWebService.ICDSService>, CDS.Client.BusinessLayer.CDSWebService.ICDSService {
        
        public CDSServiceClient() {
        }
        
        public CDSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CDSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CDSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CDSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SaveDocument(CDS.Client.DataAccessLayer.DB.SYS_DOC_Header entry, long printer) {
            return base.Channel.SaveDocument(entry, printer);
        }
        
        public System.Threading.Tasks.Task<string> SaveDocumentAsync(CDS.Client.DataAccessLayer.DB.SYS_DOC_Header entry, long printer) {
            return base.Channel.SaveDocumentAsync(entry, printer);
        }
        
        public string PrintDocument(long id, long printerBy, long printer) {
            return base.Channel.PrintDocument(id, printerBy, printer);
        }
        
        public System.Threading.Tasks.Task<string> PrintDocumentAsync(long id, long printerBy, long printer) {
            return base.Channel.PrintDocumentAsync(id, printerBy, printer);
        }
        
        public string ApproveDocument(long entryId, long personId) {
            return base.Channel.ApproveDocument(entryId, personId);
        }
        
        public System.Threading.Tasks.Task<string> ApproveDocumentAsync(long entryId, long personId) {
            return base.Channel.ApproveDocumentAsync(entryId, personId);
        }
        
        public string CancelDocument(long entryId, long personId) {
            return base.Channel.CancelDocument(entryId, personId);
        }
        
        public System.Threading.Tasks.Task<string> CancelDocumentAsync(long entryId, long personId) {
            return base.Channel.CancelDocumentAsync(entryId, personId);
        }
        
        public string RejectDocument(long entryId, long personId) {
            return base.Channel.RejectDocument(entryId, personId);
        }
        
        public System.Threading.Tasks.Task<string> RejectDocumentAsync(long entryId, long personId) {
            return base.Channel.RejectDocumentAsync(entryId, personId);
        }
        
        public string SaveJobLines(long headerid, System.Collections.Generic.List<CDS.Client.DataAccessLayer.DB.SYS_DOC_Line> lines, long printer) {
            return base.Channel.SaveJobLines(headerid, lines, printer);
        }
        
        public System.Threading.Tasks.Task<string> SaveJobLinesAsync(long headerid, System.Collections.Generic.List<CDS.Client.DataAccessLayer.DB.SYS_DOC_Line> lines, long printer) {
            return base.Channel.SaveJobLinesAsync(headerid, lines, printer);
        }
        
        public string GenerateOrder(long orderId, long createdBy, long printer) {
            return base.Channel.GenerateOrder(orderId, createdBy, printer);
        }
        
        public System.Threading.Tasks.Task<string> GenerateOrderAsync(long orderId, long createdBy, long printer) {
            return base.Channel.GenerateOrderAsync(orderId, createdBy, printer);
        }
        
        public System.Collections.Generic.List<string> GetAvailablePrinter(string excludeLocation) {
            return base.Channel.GetAvailablePrinter(excludeLocation);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAvailablePrinterAsync(string excludeLocation) {
            return base.Channel.GetAvailablePrinterAsync(excludeLocation);
        }
        
        public bool DistributedTransactionServiceRunning() {
            return base.Channel.DistributedTransactionServiceRunning();
        }
        
        public System.Threading.Tasks.Task<bool> DistributedTransactionServiceRunningAsync() {
            return base.Channel.DistributedTransactionServiceRunningAsync();
        }
        
        public void ProcessStatements(long personId, long periodId, System.Nullable<long> printerId, System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> statements) {
            base.Channel.ProcessStatements(personId, periodId, printerId, statements);
        }
        
        public System.Threading.Tasks.Task ProcessStatementsAsync(long personId, long periodId, System.Nullable<long> printerId, System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> statements) {
            return base.Channel.ProcessStatementsAsync(personId, periodId, printerId, statements);
        }
        
        public System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement> ProcessStatementsUpdate() {
            return base.Channel.ProcessStatementsUpdate();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<CDS.Client.DataAccessLayer.Types.Statement>> ProcessStatementsUpdateAsync() {
            return base.Channel.ProcessStatementsUpdateAsync();
        }
    }
}
