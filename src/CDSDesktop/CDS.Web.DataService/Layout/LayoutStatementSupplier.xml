<?xml version="1.0" encoding="utf-8" ?>
<statement width="80" height="69" height-inches="8" auto-feed-paper="1" auto-cut-paper="0">
  <data>
    <dataset id="CLOSING_BALANCES">
      DECLARE @EntityId BIGINT = [Parameter01]
      DECLARE @PeriodId BIGINT = [Parameter02]
      SELECT EntityId,[1] AS [CURRENT],[2] AS [030],[3] AS [060],[4] AS [090],[5] AS [120+]
      FROM(
      SELECT EntityId,
      AgingId,
      Amount
      FROM [CDS_GLX].GLX_History
      WHERE EntityId = @EntityId
      AND PeriodId = @PeriodId ) P PIVOT( SUM(Amount) FOR AgingId IN( [1],[2],[3],[4],[5] )) AS EndBalance;
    </dataset>
    <dataset id="MOVEMENT">
      DECLARE @EntityId BIGINT = [Parameter01]
      DECLARE @PeriodId BIGINT = [Parameter02]

      --DECLARE @CodeMain nvarchar(50) = (SELECT CodeMain from [CDS_SYS].[SYS_Entity] where Id = @EntityId)
      DECLARE @IsCustomer BIT = CASE
      --GET ACCOUNTS CONTROL ACCOUNT
      ( SELECT MasterControlId
      FROM [CDS_GLX].[GLX_Account]
      WHERE EntityId = @EntityId )
      --CHECK IF THE CONTROL ACCOUNT IS A DEBTOR
      WHEN( SELECT TOP 1 EntityId
      FROM [CDS_GLX].[GLX_SiteAccount]
      WHERE TypeId = 9 )
      THEN 1
      ELSE 0
      END;
      --PRINT '@EntityId' + CAST(@EntityId AS NVARCHAR(10));
      --GET CODE SUB FOR ENTITY
      DECLARE @CodeSub NVARCHAR(50) = ( SELECT CodeSub
      FROM [CDS_SYS].[SYS_Entity]
      WHERE Id = @EntityId );
      --GET OPENITEM STAUS OF ENTITY
      DECLARE @IsOpenItem BIT = ( SELECT ISNULL(OpenItem, 0)
      FROM [CDS_ORG].[ORG_Company]
      INNER JOIN [CDS_ORG].[ORG_Entity] ON [ORG_Company].EntityId = [ORG_Entity].[Id]
      INNER JOIN [CDS_SYS].[SYS_Entity] ON [ORG_Entity].EntityId = [SYS_Entity].Id
      WHERE [SYS_Entity].[CodeSub] = @CodeSub
      AND [ORG_Company].[TypeId] = CASE @IsCustomer
      WHEN 1
      THEN 1
      ELSE 2
      END );
      --PRINT '@CodeSub' + @CodeSub;
      --PRINT '@IsCustomer' + CAST(@IsCustomer AS NVARCHAR(10));
      DECLARE @CompanyId BIGINT = ( SELECT [ORG_Company].Id
      FROM [CDS_ORG].[ORG_Company]
      INNER JOIN [CDS_ORG].[ORG_Entity] ON [ORG_Company].EntityId = [ORG_Entity].[Id]
      INNER JOIN [CDS_SYS].[SYS_Entity] ON [ORG_Entity].EntityId = [SYS_Entity].Id
      WHERE [SYS_Entity].[CodeSub] = @CodeSub
      AND [ORG_Company].[TypeId] = CASE @IsCustomer
      WHEN 1
      THEN 1
      ELSE 2
      END );
      --PRINT '@CompanyId' + CAST(ISNULL(@CompanyId, -1) AS NVARCHAR(10));
      DECLARE @PrevPeriodId BIGINT;
      DECLARE @DateEnd DATETIME;
      DECLARE @DateStart DATETIME;
      DECLARE @PaymentAccounts TABLE( EntityId    BIGINT,
      TaxEntityId BIGINT,
      Description NVARCHAR(50));
      DECLARE @PaymentAccount XML;
      SELECT TOP 1 @PaymentAccount = PaymentAccounts
      FROM [CDS_SYS].SYS_Site;
      INSERT INTO @PaymentAccounts
      SELECT N.query( 'EntityId/text()' ).value( '.', 'nvarchar(50)' ) AS EntityId,
      ISNULL((
      SELECT TOP 1 [CDS_GLX].GLX_Tax.EntityId
      FROM [CDS_GLX].GLX_Tax
      WHERE Id = N.query( 'TaxId/text()' ).value( '.', 'int' )), -1) AS TaxEntityId,
      N.query( 'AccountDescription/text()' ).value( '.', 'nvarchar(50)' ) AS Description
      FROM @PaymentAccount.nodes( '/ArrayOfPaymentAccount/PaymentAccount' ) AS T( N );
      SELECT @DateStart = StartDate,
      @DateEnd = EndDate
      FROM [CDS_SYS].SYS_Period
      WHERE Id = @PeriodId;
      --PRINT @PeriodId;
      SELECT TOP 1 @PrevPeriodId = Id
      FROM [CDS_SYS].SYS_Period
      WHERE DATEADD(DAY, -5, @DateStart) BETWEEN [CDS_SYS].SYS_Period.StartDate AND [CDS_SYS].SYS_Period.EndDate;
      --PRINT @PrevPeriodId;
      DECLARE @Agings TABLE( Date        DATETIME,
      Reference   NVARCHAR(200),
      Description NVARCHAR(200),
      AgingCode   NVARCHAR(200),
      Outstanding DECIMAL(18, 2),
      Amount      DECIMAL(18, 2),
      TypeName    NVARCHAR(200));
      BEGIN
      IF( @IsOpenItem = 1 )
      BEGIN
      --PRINT 'openitem';
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '001' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 5 ) Outstanding,
      (
      SELECT SUM(Amount)
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId IN( 4, 5 )) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '002' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 4 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 3 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '003' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 3 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 2 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '004' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 2 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 1 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT [CDS_GLX].GLX_Header.CreatedOn,
      CASE
      WHEN ISNULL([CDS_ORG].ORG_Company.CustomValue3, '') = ''
      THEN [CDS_GLX].GLX_Header.Reference
      ELSE [CDS_GLX].GLX_Header.Reference + ISNULL(' (' + [CDS_ORG].ORG_Company.CustomValue3 + ')', '')
      END Reference,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Header.description
      ELSE PaymentAccounts.Description
      END Description,
      '005' AgingCode,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Outstanding,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Amount,
      CASE
      WHEN pay.Id IS NULL
      THEN ISNULL([CDS_GLX].GLX_JournalType.Name, '')
      ELSE PaymentAccounts.Description
      END
      FROM [CDS_GLX].GLX_Header
      INNER JOIN [CDS_GLX].GLX_Line ON [CDS_GLX].GLX_Header.Id = [CDS_GLX].GLX_Line.HeaderId
      INNER JOIN [CDS_GLX].GLX_Account ON [CDS_GLX].GLX_Line.EntityId = [CDS_GLX].GLX_Account.EntityId
      INNER JOIN [CDS_ORG].ORG_Company ON [CDS_ORG].ORG_Company.Id = @CompanyId
      INNER JOIN [CDS_GLX].GLX_JournalType ON [CDS_GLX].GLX_Header.JournalTypeId = [CDS_GLX].GLX_JournalType.Id
      LEFT JOIN [CDS_GLX].GLX_Line Pay ON pay.HeaderId = [CDS_GLX].GLX_Header.Id
      AND pay.EntityId IN(
      SELECT EntityId
      FROM @PaymentAccounts )
      LEFT JOIN @PaymentAccounts PaymentAccounts ON pay.EntityId = PaymentAccounts.EntityId
      LEFT JOIN [CDS_GLX].GLX_Line PayTax ON PayTax.HeaderId = [CDS_GLX].GLX_Header.Id
      AND PayTax.EntityId IN(
      SELECT TaxEntityId
      FROM @PaymentAccounts )
      WHERE [CDS_GLX].GLX_Header.PeriodId = @PeriodId
      AND [CDS_GLX].GLX_Line.EntityId = @EntityId
      AND ISNULL([CDS_GLX].GLX_JournalType.Name, '') &lt;&gt; 'SUMMARY';
      INSERT INTO @Agings
      SELECT [CDS_GLX].GLX_Header.CreatedOn,
      CASE
      WHEN ISNULL([CDS_ORG].ORG_Company.CustomValue3, '') = ''
      THEN [CDS_GLX].GLX_Header.Reference
      ELSE [CDS_GLX].GLX_Header.Reference + ISNULL(' (' + [CDS_ORG].ORG_Company.CustomValue3 + ')', '')
      END Reference,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Header.description
      ELSE PaymentAccounts.Description
      END Description,
      '005' AgingCode,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Outstanding,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Amount,
      CASE
      WHEN pay.Id IS NULL
      THEN ISNULL([CDS_GLX].GLX_JournalType.Name, '')
      ELSE PaymentAccounts.Description
      END
      FROM [CDS_GLX].GLX_Header
      INNER JOIN [CDS_GLX].GLX_Line ON [CDS_GLX].GLX_Header.Id = [CDS_GLX].GLX_Line.HeaderId
      INNER JOIN [CDS_GLX].GLX_Account ON [CDS_GLX].GLX_Line.EntityId = [CDS_GLX].GLX_Account.EntityId
      INNER JOIN [CDS_ORG].ORG_Company ON [CDS_ORG].ORG_Company.Id = @CompanyId
      INNER JOIN [CDS_GLX].GLX_JournalType ON [CDS_GLX].GLX_Header.JournalTypeId = [CDS_GLX].GLX_JournalType.Id
      LEFT JOIN [CDS_GLX].GLX_Line Pay ON pay.HeaderId = [CDS_GLX].GLX_Header.Id
      AND pay.EntityId IN(
      SELECT EntityId
      FROM @PaymentAccounts )
      LEFT JOIN @PaymentAccounts PaymentAccounts ON pay.EntityId = PaymentAccounts.EntityId
      LEFT JOIN [CDS_GLX].GLX_Line PayTax ON PayTax.HeaderId = [CDS_GLX].GLX_Header.Id
      AND PayTax.EntityId IN(
      SELECT TaxEntityId
      FROM @PaymentAccounts )
      WHERE [CDS_GLX].GLX_Account.ControlId = @EntityId
      AND [CDS_GLX].GLX_Header.PeriodId = @PeriodId
      AND ISNULL([CDS_GLX].GLX_JournalType.Name, '') &lt;&gt; 'SUMMARY';
      SELECT Date,
      Reference,
      Description,
      AgingCode,
      SUM(Outstanding) Outstanding,
      SUM(Amount) Amount,
      SUM(CASE
      WHEN Amount >= 0
      THEN Amount
      ELSE 0
      END) Debit,
      SUM(CASE
      WHEN Amount >= 0
      THEN 0
      ELSE-Amount
      END) Credit,
      TypeName
      FROM @Agings
      WHERE Amount &lt;&gt; 0
      GROUP BY Date,
      Reference,
      Description,
      AgingCode,
      TypeName
      ORDER BY Date,
      Reference;
      END;
      ELSE
      BEGIN
      DELETE @Agings;
      --PRINT 'bbf';
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '001' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 5 ) Outstanding,
      (
      SELECT SUM(Amount)
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId IN( 4, 5 )) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '002' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 4 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 3 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '003' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 3 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 2 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT @DateStart,
      'BBF' Reference,
      'BALANCE BROUGHT FORWARD' Description,
      '004' AgingCode,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PeriodId
      AND EntityId = @EntityId
      AND AgingId = 2 ) Outstanding,
      (
      SELECT Amount
      FROM [CDS_GLX].GLX_History
      WHERE PeriodId = @PrevPeriodId
      AND EntityId = @EntityId
      AND AgingId = 1 ) Amount,
      'BBF' TypeName;
      INSERT INTO @Agings
      SELECT [CDS_GLX].GLX_Header.CreatedOn,
      CASE
      WHEN ISNULL([CDS_ORG].ORG_Company.CustomValue3, '') = ''
      THEN [CDS_GLX].GLX_Header.Reference
      ELSE [CDS_GLX].GLX_Header.Reference + ISNULL(' (' + [CDS_ORG].ORG_Company.CustomValue3 + ')', '')
      END Reference,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Header.description
      ELSE PaymentAccounts.Description
      END Description,
      '005' AgingCode,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Outstanding,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Amount,
      CASE
      WHEN pay.Id IS NULL
      THEN ISNULL([CDS_GLX].GLX_JournalType.Name, '')
      ELSE PaymentAccounts.Description
      END
      FROM [CDS_GLX].GLX_Header
      INNER JOIN [CDS_GLX].GLX_Line ON [CDS_GLX].GLX_Header.Id = [CDS_GLX].GLX_Line.HeaderId
      INNER JOIN [CDS_GLX].GLX_Account ON [CDS_GLX].GLX_Line.EntityId = [CDS_GLX].GLX_Account.EntityId
      INNER JOIN [CDS_ORG].ORG_Company ON [CDS_ORG].ORG_Company.Id = @CompanyId
      INNER JOIN [CDS_GLX].GLX_JournalType ON [CDS_GLX].GLX_Header.JournalTypeId = [CDS_GLX].GLX_JournalType.Id
      LEFT JOIN [CDS_GLX].GLX_Line Pay ON pay.HeaderId = [CDS_GLX].GLX_Header.Id
      AND pay.EntityId IN(
      SELECT EntityId
      FROM @PaymentAccounts )
      LEFT JOIN @PaymentAccounts PaymentAccounts ON pay.EntityId = PaymentAccounts.EntityId
      LEFT JOIN [CDS_GLX].GLX_Line PayTax ON PayTax.HeaderId = [CDS_GLX].GLX_Header.Id
      AND PayTax.EntityId IN(
      SELECT TaxEntityId
      FROM @PaymentAccounts )
      WHERE [CDS_GLX].GLX_Header.PeriodId = @PeriodId
      AND [CDS_GLX].GLX_Line.EntityId = @EntityId
      AND ISNULL([CDS_GLX].GLX_JournalType.Name, '') &lt;&gt; 'SUMMARY';
      INSERT INTO @Agings
      SELECT [CDS_GLX].GLX_Header.CreatedOn,
      CASE
      WHEN ISNULL([CDS_ORG].ORG_Company.CustomValue3, '') = ''
      THEN [CDS_GLX].GLX_Header.Reference
      ELSE [CDS_GLX].GLX_Header.Reference + ISNULL(' (' + [CDS_ORG].ORG_Company.CustomValue3 + ')', '')
      END Reference,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Header.description
      ELSE PaymentAccounts.Description
      END Description,
      '005' AgingCode,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Outstanding,
      CASE
      WHEN pay.Id IS NULL
      THEN [CDS_GLX].GLX_Line.Amount
      WHEN PaymentAccounts.TaxEntityId = -1
      THEN-pay.Amount
      ELSE-pay.Amount + -PayTax.Amount
      END Amount,
      CASE
      WHEN pay.Id IS NULL
      THEN ISNULL([CDS_GLX].GLX_JournalType.Name, '')
      ELSE PaymentAccounts.Description
      END
      FROM [CDS_GLX].GLX_Header
      INNER JOIN [CDS_GLX].GLX_Line ON [CDS_GLX].GLX_Header.Id = [CDS_GLX].GLX_Line.HeaderId
      INNER JOIN [CDS_GLX].GLX_Account ON [CDS_GLX].GLX_Line.EntityId = [CDS_GLX].GLX_Account.EntityId
      INNER JOIN [CDS_ORG].ORG_Company ON [CDS_ORG].ORG_Company.Id = @CompanyId
      INNER JOIN [CDS_GLX].GLX_JournalType ON [CDS_GLX].GLX_Header.JournalTypeId = [CDS_GLX].GLX_JournalType.Id
      LEFT JOIN [CDS_GLX].GLX_Line Pay ON pay.HeaderId = [CDS_GLX].GLX_Header.Id
      AND pay.EntityId IN(
      SELECT EntityId
      FROM @PaymentAccounts )
      LEFT JOIN @PaymentAccounts PaymentAccounts ON pay.EntityId = PaymentAccounts.EntityId
      LEFT JOIN [CDS_GLX].GLX_Line PayTax ON PayTax.HeaderId = [CDS_GLX].GLX_Header.Id
      AND PayTax.EntityId IN(
      SELECT TaxEntityId
      FROM @PaymentAccounts )
      WHERE [CDS_GLX].GLX_Account.ControlId = @EntityId
      AND [CDS_GLX].GLX_Header.PeriodId = @PeriodId
      AND ISNULL([CDS_GLX].GLX_JournalType.Name, '') &lt;&gt; 'SUMMARY';
      SELECT Date,
      Reference,
      Description,
      AgingCode,
      SUM(Outstanding) Outstanding,
      SUM(Amount) Amount,
      SUM(CASE
      WHEN Amount >= 0
      THEN Amount
      ELSE 0
      END) Debit,
      SUM(CASE
      WHEN Amount >= 0
      THEN 0
      ELSE-Amount
      END) Credit,
      TypeName
      FROM @Agings
      WHERE Amount &lt;&gt; 0
      GROUP BY Date,
      Reference,
      Description,
      AgingCode,
      TypeName
      ORDER BY Date,
      Reference;
      END;
      END;
    </dataset>
    <dataset id="STATIC_VALUES">
      DECLARE @EntityId BIGINT = [Parameter01]
      DECLARE @PeriodId BIGINT = [Parameter02]
      SELECT(
      SELECT Title
      FROM [CDS_SYS].SYS_Entity
      WHERE Id = @EntityId ) AS AccountName,
      (
      SELECT Code
      FROM [CDS_SYS].SYS_Period
      WHERE Id = @PeriodId ) AS PeriodCode;
    </dataset>
    <dataset id="TRANSACTION_SUMMARY">
      DECLARE @EntityId BIGINT = [Parameter01]
      DECLARE @PeriodId BIGINT = [Parameter02]
      SELECT [CDS_SYS].SYS_Period.Code,
      [CDS_GLX].GLX_JournalType.Name,
      SUM([CDS_GLX].GLX_Line.Amount) AS Amount,
      ABS(SUM([CDS_GLX].GLX_Line.Amount)) AS RegularAmount
      FROM [CDS_GLX].GLX_Line
      INNER JOIN [CDS_GLX].GLX_Header ON [CDS_GLX].GLX_Line.HeaderId = [CDS_GLX].GLX_Header.Id
      INNER JOIN [CDS_GLX].GLX_JournalType ON [CDS_GLX].GLX_Header.JournalTypeId = [CDS_GLX].GLX_JournalType.Id
      INNER JOIN [CDS_SYS].SYS_Entity ON [CDS_SYS].SYS_Entity.Id = [CDS_GLX].GLX_Line.EntityId
      INNER JOIN [CDS_SYS].SYS_Period ON [CDS_GLX].GLX_Header.PeriodId = [CDS_SYS].SYS_Period.Id
      AND [CDS_GLX].GLX_Header.PeriodId = @PeriodId
      WHERE [CDS_SYS].SYS_Entity.Id = @EntityId
      GROUP BY [CDS_SYS].SYS_Period.Code,
      [CDS_GLX].GLX_JournalType.Name;
    </dataset>
  </data>
  <layout>
  </layout>
  <header left="0" top="0" >
    <format pitch="10">
      <!-- 1 -->
      <label left="0" top="0" width="40" format="{0}" halign="left" dataset="STATIC_VALUES">AccountName</label>
      <label left="80" top="0" width="40" format="{0}" halign="right" height="3" dataset="STATIC_VALUES">PeriodCode</label>
      <!--<label left="8" top="6" width="25" format="{0}" halign="left" ></label>-->

      <!-- 2 -->
      <!--<label left="41" top="0" width="38" format="{0}" halign="left" height="4" dataset="DOCUMENT">ShippingAddress</label>
      <label left="41" top="6" width="31" format="*** {0} ***" halign="left" dataset="DOCUMENT">TransactionType</label>
      <label left="62" top="6" width="6" format="{0}" halign="left" >PAGE :</label>
      <label left="70" top="6" width="10" format="{0}" halign="left" dataset="DOCUMENT">[Page#]/[TotalPages#]</label>-->

      <!-- 3 -->
      <!--<label left="0" top="9" width="6" format="{0}" halign="left" dataset="COMPANY_DATA">Code</label>
      <label left="6" top="9" width="11" format="{0:dd/MM/yyyy}" halign="left" dataset="DOCUMENT">DatePosted</label>
      <label left="18" top="9" width="12" format="{0}" halign="left" dataset="DOCUMENT">OrderNumber</label>
      <label left="32" top="9" width="7" format="{0}" halign="left" dataset="DOCUMENT">DocumentNumber</label>
      <label left="41" top="9" width="13" format="{0}" halign="left" dataset="DOCUMENT">ReferenceOurs</label>
      <label left="56" top="9" width="5" format="{0}" halign="left" ></label>
      <label left="64" top="9" width="11" format="{0}" halign="left" dataset="DOCUMENT">RepCode</label>-->
    </format>
  </header>

  <body left="0" top="12" pagemax="9">
    <item dataset="MOVEMENT" height="1">
      <!-- 4 -->
      <format pitch="10">
        <label left="0" top="0" width="10" format="{0}" halign="left" dataset="MOVEMENT">Date</label>
        <label left="11" top="0" width="10" format="{0}" halign="left" dataset="MOVEMENT">Reference</label>
        <label left="22" top="0" width="10" format="{0}" halign="left" dataset="MOVEMENT">Description</label>
        <label left="43" top="0" width="10" format="{0:0.00}" halign="right" dataset="MOVEMENT">Debit</label>
        <label left="54" top="0" width="10" format="{0:0.00}" halign="right" dataset="MOVEMENT">Credit</label>
        <!-- <label left="63" top="0" width="4" format="{0:#0.00}" halign="right" dataset="DOCUMENT_LINE">DiscountPercentage</label>
        <label left="70" top="0" width="9" format="{0:#0.00}" halign="right" dataset="DOCUMENT_LINE">TotalExcl</label>-->
      </format>
    </item>
  </body>

  <footer left="0" top="22">
    <format pitch="10">
      <!-- 5 -->
      <!--<label left="68" top="0" width="10" format="{0:#0.00}" halign="right" dataset="DOCUMENT">TotalExcl</label>
      <label left="68" top="2" width="10" format="{0:#0.00}" halign="right" dataset="DOCUMENT">TotalTax</label>
      <label left="68" top="4" width="10" format="{0:#0.00}" halign="right" dataset="DOCUMENT">Total</label>-->

      <!-- 6 -->
      <!--<label left="0" top="1" width="16" format="{0}" halign="left" dataset="COMPANY_DATA">CustomValue1</label>
      <label left="15" top="1" width="20" format="{0}" halign="left" dataset="DOCUMENT">VatNumber</label>
      <label left="37" top="1" width="16" format="{0:hh:mm:ss}" halign="left" dataset="DOCUMENT">EndDate</label>
      <label left="0" top="3" width="46" height="2" format="{0}" halign="left" dataset="DOCUMENT">Comment</label>-->
    </format>
  </footer>
</statement>