//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDS.Client.DataAccessLayer.DB
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    
    
    public partial class SYS_Entity : INotifyPropertyChanged, IBaseEntity
    { 
    	bool hasChanges = false;
        public bool HasChanges
        {
        	get
        	{
                return hasChanges;
        	}
        	set
        	{
                if (hasChanges != value)
                    hasChanges = value;
        	}
        } 
    	
    	bool ignoreChanges = false;
        public bool IgnoreChanges
        {
            get
            {
                
                
                return ignoreChanges;
            }
            set
            {
                if (ignoreChanges != value)
                {
                    ignoreChanges = value;
                }
            }
        }
    
    	List<string> changeList = new List<string>();
    	[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public List<string> ChangeList
        {
            get
            { 
                return changeList;
            }
            set
            {
                if (changeList != value)
                {
                    changeList = value;
                }
            }
        } 
    
    	public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged; 
    	private void SetProperty<T>(ref T field, T value, [System.Runtime.CompilerServices.CallerMemberName] string name = "")
    	{
    		if (!EqualityComparer<T>.Default.Equals(field, value))
    		{
    			field = value;
    			//ChangeSet.Add(LogEntry.New<T>(field.ToString(),this.ToString(), this.Id,  field,  value ));
    			var handler = PropertyChanged;
    			if (handler != null)
    			{
    				if(!name.StartsWith("Id") && name != "Title" && name != "CreatedOn" && !IgnoreChanges)  
    				{
    					HasChanges = true;
    					ChangeList.Add(name);
    				}
    
    				handler(this, new System.ComponentModel.PropertyChangedEventArgs(name));
    			}
    		}
    	} 
     
        public SYS_Entity()
        {
            this.SYS_DOC_Line = new List<SYS_DOC_Line>();
            this.SYS_Surcharge = new List<SYS_Surcharge>();
            this.SYS_Surcharge1 = new List<SYS_Surcharge>();
            this.SYS_Site = new List<SYS_Site>();
        }
    
        private long id;
        private byte typeId;
        private string codeMain;
        private string codeSub;
        private string shortName;
        private string name;
        private string description;
        private bool archived;
        private Nullable<long> createdBy;
        private Nullable<System.DateTime> createdOn;
        private string title;
    
        public long Id 
    	{ 
    		get { return id; }
    		set { SetProperty(ref id, value); }
    	 }
        public byte TypeId 
    	{ 
    		get { return typeId; }
    		set { SetProperty(ref typeId, value); }
    	 }
        public string CodeMain 
    	{ 
    		get { return codeMain; }
    		set { SetProperty(ref codeMain, value); }
    	 }
        public string CodeSub 
    	{ 
    		get { return codeSub; }
    		set { SetProperty(ref codeSub, value); }
    	 }
        public string ShortName 
    	{ 
    		get { return shortName; }
    		set { SetProperty(ref shortName, value); }
    	 }
        public string Name 
    	{ 
    		get { return name; }
    		set { SetProperty(ref name, value); }
    	 }
        public string Description 
    	{ 
    		get { return description; }
    		set { SetProperty(ref description, value); }
    	 }
        public bool Archived 
    	{ 
    		get { return archived; }
    		set { SetProperty(ref archived, value); }
    	 }
        public Nullable<long> CreatedBy 
    	{ 
    		get { return createdBy; }
    		set { SetProperty(ref createdBy, value); }
    	 }
        public Nullable<System.DateTime> CreatedOn 
    	{ 
    		get { return createdOn; }
    		set { SetProperty(ref createdOn, value); }
    	 }
        public string Title 
    	{ 
    		get { return title; }
    		set { SetProperty(ref title, value); }
    	 }
    
        [System.Xml.Serialization.XmlIgnore]
    	public virtual ICollection<SYS_DOC_Line> SYS_DOC_Line { get; set; }
        
    	public virtual SYS_Person SYS_Person { get; set; }
        
    	public virtual SYS_Type SYS_Type { get; set; }
        [System.Xml.Serialization.XmlIgnore]
    	public virtual ICollection<SYS_Surcharge> SYS_Surcharge { get; set; }
        [System.Xml.Serialization.XmlIgnore]
    	public virtual ICollection<SYS_Surcharge> SYS_Surcharge1 { get; set; }
        [System.Xml.Serialization.XmlIgnore]
    	public virtual ICollection<SYS_Site> SYS_Site { get; set; }
    }
}
